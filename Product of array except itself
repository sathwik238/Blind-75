class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int product=1;
        int n0=0;
        int pw0=1;
        
        for(int i=0;i<nums.size();i++)
        {
        
            product*=nums[i];
            if (nums[i]==0){
                n0++;
                continue;
            }
            pw0*=nums[i];
            
        }   
        vector<int> ans;
        if (n0>1){
            for (int i=0;i<nums.size();i++){
            ans.push_back(0);
            }
        }
        else{
        for (int i=0;i<nums.size();i++){
            
            if(nums[i]==0){
                ans.push_back(pw0);
            }
            else{
                ans.push_back(product/nums[i]);
            }
        }
        }
        return ans;
        
    }
};



Efficient Solution:

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        res=[1]*n
        pre=1
        for i in range(n):
            res[i]=pre
            pre=pre*nums[i]
        pos=1
        for i in range(n-1,-1,-1):
            res[i]=res[i]*pos
            pos=pos*nums[i]
            
        return res    
