class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices)
        minimum=max(prices)
        maximum=min(prices)
        lmin=[0]*n
        rmax=[0]*n
        
        for i in range(n):
            lmin[i]=min(minimum,prices[i])
            minimum=min(minimum,prices[i])
           
        for i in range(n-1,-1,-1):
            rmax[i]=max(maximum,prices[i])
            maximum=max(maximum,prices[i])    
            
        for j in range(n):
            rmax[j]=rmax[j]-lmin[j]
            
        return max(rmax) 
        
 2-Pointer approach       
 
 class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l=0
        r=1
        n=len(prices)
        profit=0
        while(r<n):
            if prices[l]<prices[r]:
                currprofit=prices[r]-prices[l]
                profit=max(currprofit,profit)
            else:
                l=r
            r+=1
        return profit   
